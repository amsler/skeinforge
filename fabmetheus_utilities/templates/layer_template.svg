<?xml version="1.0" standalone="no"?>
<!--Created with Sketsa SVG Editor (http://www.kiyut.com)-->
<svg contentScriptType="text/ecmascript"
	baseProfile="full" zoomAndPan="magnify" contentStyleType="text/css"
	width="999px"
	height="999px"
	onload="init()"
	preserveAspectRatio="xMidYMid meet"
	xmlns="http://www.w3.org/2000/svg" version="1.0"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:slice="http://www.reprap.org/slice">
	<metadata>
		<slice:layers id="sliceData" javascriptControlBoxWidth='640' layerThickness="0.2" minX="0" maxX="61" minY="-5" maxY="50" minZ="0" maxZ="1" margin="20" noJavascriptControlBoxHeight='110' template="svg_layer" textHeight='22.5' version="0.1"/>
	</metadata>
	<script type="text/ecmascript"><![CDATA[
mD = document.getElementsByTagNameNS( 'http://www.reprap.org/slice', 'layers' )[ 0 ];
sliceMinX = 0;
sliceMaxX = 0;
sliceMinY = 0;
sliceMaxY = 0;
sliceMinZ = 0;
sliceMaxZ = 0;
units='mm';

//Control var's
currentLayer = 0; //Number of currently viewed layer (zero index)
javascriptControlBoxWidth = mD.getAttribute( 'javascriptControlBoxWidth' ) * 1;
javascriptControlBoxHeight = 95;
sliding = false;

//Display var's
margin = mD.getAttribute( 'margin' ) * 1;
scale = 1; //unitScale * zoomScale
sliceDimensionX = null;
sliceDimensionY = null;
sliceDimensionZ = null;
svgMinWidth = javascriptControlBoxWidth + 2 * margin; //Width of control box and margins
textHeight = mD.getAttribute( 'textHeight' ) * 1.0;
unitScale = 3.7;
zoomScale = 1; //Default 1:1 may need smaller scale for large objects

//No javascript control var
noJavascriptControlBoxHeight = mD.getAttribute( 'noJavascriptControlBoxHeight' ) * 1;

var layers = [];

function changeScale( newScale ) {
	zoomScale = newScale
	scale = unitScale * zoomScale
	viewSingle()
	setText( 'scaleNum' ,'1 : ' + 1.0 / zoomScale );
	if ( zoomScale >=1 ) //dont scale line thickness for large display scale
		document.getElementById( 'layerData' ).setAttributeNS( null, 'stroke-width', 2.0 / ( scale ) )
}

function displayLayer( layerNum ) {
	if ( layerNum >= 0 && layerNum < layers.length ) {
		layers[ currentLayer ].setAttributeNS( null, 'visibility', 'hidden' );
		layers[ layerNum ].setAttributeNS( null, 'visibility', 'visible' );
		currentLayer = layerNum;
		setText( 'layerNum', currentLayer );

		//Slider
		if ( !sliding ) {
			// 150 = width of sliderbar 14 = width circle
			x = ( 150 - 14 ) / ( layers.length - 1 ) * currentLayer
			document.getElementById( 'thumb' ).setAttributeNS( null, 'cx', x + 17 )
		}
	}
}

function getRoundedToThreePlaces( number ) {
	//Get number rounded to three places.
	return Math.round( number * 1000.0 ) / 1000.0;
}

function init() {
	//Hide no javascript control box
	document.getElementById( 'noJavascriptControls' ).setAttributeNS( null, 'visibility', 'hidden' )

	//Get meta data
	sliceMinX = mD.getAttribute( 'minX' ) * 1;
	sliceMaxX = mD.getAttribute( 'maxX' ) * 1;
	sliceMinY = mD.getAttribute( 'minY' ) * 1;
	sliceMaxY = mD.getAttribute( 'maxY' ) * 1;
	sliceMinZ = mD.getAttribute( 'minZ' ) * 1;
	sliceMaxZ = mD.getAttribute( 'maxZ' ) * 1;

	//Set Display variables
	scale = unitScale * zoomScale;
	sliceDimensionX = getRoundedToThreePlaces( sliceMaxX - sliceMinX );
	sliceDimensionY = getRoundedToThreePlaces( sliceMaxY - sliceMinY );
	sliceDimensionZ = getRoundedToThreePlaces( sliceMaxZ - sliceMinZ );

	//Find all groups
	var allGroups = document.getElementsByTagName( 'g' );

	//Find only layer groups
	for ( var i = 0; i < allGroups.length; i++ ) {
		if ( allGroups[ i ].id.indexOf( 'z:' ) == 0 ) {
			layers.push( allGroups[ i ] );
		}
	}

	//Slider
	beginningOfControlSection = document.getElementById( 'beginningOfControlSection' );
	beginningOfControlSection.addEventListener( 'mouseup', sliderUp, false );
	beginningOfControlSection.addEventListener( 'mousemove', sliderMove, false );
	slider = document.getElementById( 'slider' );
	slider.addEventListener( 'mousedown', sliderDownMove, false );
	thumb = document.getElementById( 'thumb' );
	thumb.addEventListener( 'mousedown', sliderDownMove, false );
	
	//Control box data
	setText( 'layerMax', layers.length - 1 );
	setText( 'minX', sliceMinX );
	setText( 'minX', sliceMinX );
	setText( 'minY', sliceMinY );
	setText( 'minZ', sliceMinZ );
	setText( 'maxX', sliceMaxX );
	setText( 'maxY', sliceMaxY );
	setText( 'maxZ', sliceMaxZ );
	setText( 'dimX', sliceDimensionX );
	setText( 'dimY', sliceDimensionY );
	setText( 'dimZ', sliceDimensionZ );
	setText( 'scaleNum', '1 : ' + 1.0 / zoomScale );
	setText( 'layerThickness', 'Layer Thickness: ' + mD.getAttribute( 'layerThickness' ) + units );

	changeScale( zoomScale );
}

function setSVG( width, height ) {
	rootSVG = document.getElementsByTagName( 'svg' )[ 0 ];
	rootSVG.setAttributeNS( null, 'width', width + 'px' )
	rootSVG.setAttributeNS( null, 'height', height + 'px' )
}

function setText( id, str ) {
	e = document.getElementById( id )
	if ( e != null )
		e.firstChild.nodeValue = str;
}

function sliderDown( event ) {
	sliding = true;
}

function sliderDownMove( event ) {
	sliding = true;
	sliderMove( event );
}

function sliderUp( event ) {
	sliding = false;
}

function sliderMove( event ) {
	if ( !sliding ) {
		return;
	}
	value = event.clientX - 130;
	thumb = document.getElementById( 'thumb' );
	if ( value > 6 && value < 144 ) {
		thumb.setAttribute( 'cx', 10 + value );
		zoneWidth = ( 150 - 14 ) / ( layers.length )
		newLayer = Math.round( ( value - 7 - 0.5 * zoneWidth ) / zoneWidth )
		if ( newLayer != currentLayer ) {
			displayLayer( newLayer )
		}
	}
}

function viewAll() {
	//Set svg size and view port
	width = margin + ( sliceDimensionX * unitScale ) + margin;
	width = Math.max( width, svgMinWidth );
	height = layers.length * ( margin + sliceDimensionY * unitScale + textHeight ) + 3 * margin + textHeight + noJavascriptControlBoxHeight;
	setSVG( width,height );

	//move and show all layers 
	for ( var i in layers ) {
		x = margin;
		y = ( 1 * i + 1 ) * ( margin + sliceDimensionY * unitScale ) + i * textHeight;
		layers[ i ].setAttributeNS( null, 'transform', 'translate(' + x + ', ' + y + ')' );
		transform = 'scale(' + unitScale + ' ' + ( unitScale * - 1 ) + ') translate(' + ( sliceMinX * - 1 ) + ' ' + ( sliceMinY * - 1 ) + ')';
		pathElements = layers[ i ].getElementsByTagName( 'path' );
		for ( var pathElementIndex = 0; pathElementIndex < pathElements.length; pathElementIndex++ ) {
			pathElements[ pathElementIndex ].setAttributeNS( null, 'transform', transform );
		}
		layers[ i ].setAttributeNS( null, 'visibility', 'visible' );
		layers[ i ].getElementsByTagName( 'text' )[ 0 ].setAttributeNS( null, 'visibility', 'visible' );
	}

	//show control box
	document.getElementById( 'javascriptControls' ).setAttributeNS( null, 'visibility', 'hidden' );
	document.getElementById( 'noJavascriptControls' ).setAttributeNS( null, 'visibility', 'visible' );
	y = layers.length * ( margin + sliceDimensionY * unitScale + textHeight ) + margin;
	document.getElementById( 'buttonSingle' ).setAttributeNS( null, 'visibility', 'visible' );
	document.getElementById( 'buttonSingle' ).setAttributeNS( null, 'transform', 'translate(' + margin + ' ' + y + ')' );
}

function viewSingle() {
	//Set svg size and view port
	width = margin + ( sliceDimensionX * scale ) + margin;
	width = Math.max( width, svgMinWidth );
	height = margin + ( sliceDimensionY * scale ) + margin + javascriptControlBoxHeight + margin;
	setSVG( width,height );

	//move and hide all layers 
	for ( var i in layers ) {
		y = margin + sliceDimensionY * scale
		layers[ i ].setAttributeNS( null, 'transform', 'translate(' + margin + ' ' + y + ')' );
		layers[ i ].setAttributeNS( null, 'visibility', 'hidden' );
		layers[ i ].getElementsByTagName( 'text' )[ 0 ].setAttributeNS( null, 'visibility', 'hidden' );
		transform = 'scale(' + scale + ' ' + ( scale * - 1 ) + ') translate(' + ( sliceMinX * - 1 ) + ' ' + ( sliceMinY * - 1 ) + ')';
		pathElements = layers[ i ].getElementsByTagName( 'path' );
		for ( var pathElementIndex = 0; pathElementIndex < pathElements.length; pathElementIndex++ ) {
			pathElements[ pathElementIndex ].setAttributeNS( null, 'transform', transform );
		}
	}

	//show control box
	document.getElementById( 'javascriptControls' ).setAttributeNS( null, 'visibility', 'visible' );
	document.getElementById( 'noJavascriptControls' ).setAttributeNS( null, 'visibility', 'hidden' );
	y = margin + sliceDimensionY * scale + margin;
	document.getElementById( 'javascriptControls' ).setAttributeNS( null, 'transform', 'translate(' + margin + ' ' + y + ')' );
	document.getElementById( 'buttonSingle' ).setAttributeNS( null, 'visibility', 'hidden' );

	//show current layer
	displayLayer( currentLayer );
}
	]]></script>

	<title>replaceWith_Title</title>

	<!--Begin Layer Data   -->
	<g id="layerData" fill="#556B2F" stroke="#00F" stroke-width="0.54px" font-weight="bold" font-family="Arial" font-size="15px">
		<!--id="sliceElementTemplate" must be there or else the slice template will not be found-->
		<g id="sliceElementTemplate" transform="translate(20, 242)">
			<!--id="layerTextTemplate" must be there so that the text could be removed if necessary-->
			<text id="layerTextTemplate" y="15" fill="#000" stroke="none">Layer 1, z:0.1</text>
 			<path transform="scale(3.7, -3.7) translate(0, 5)" d="M 0 -5 L 50 0 L60 50 L 5 50 z M 5 3 L5 15 L15 15 L15 5 z"/>
		</g>
	</g>
	<!--End Layer Data-->

	<!--id="beginningOfControlSection" must be there or else the control box will be carved and so that the controls could be removed-->
	<g id="beginningOfControlSection" font-weight="bold" font-family="Arial" font-size="15px">
		<!--Button to change from all to single-->
		<text id="buttonSingle" fill="darkslateblue" visibility="hidden" onclick="viewSingle()">[Single View]</text>
		<!--Control box for single slice layout-->
		<g id="javascriptControls" visibility="hidden" fill="#000">
			<rect width="640" height="90" stroke="gray" stroke-width="4px" fill="silver"/>	
			<g>
				<path stroke="#000" stroke-width="3" d="M 20 20 h5 l-5 -10 l-5 10 h5 v35 h35 v-5 l10 5 l-10 5 v-5 h-35 z"/>
				<text x="25" y="20">Y</text>
				<text x="69" y="60">X</text>
				<text x="10" y="80" id="buttonAll" onclick="viewAll();" fill="darkslateblue">[Show All]</text>
			</g>
			<g transform="translate(100, 20)">
				<text id="layerMin">0</text>
				<rect id="slider" x="10" y="-12" width="150" height="14" fill="gray"/>
				<circle id="thumb" cx="17" cy="-5" r="7" fill="darkslateblue"/>
				<text x="163" id="layerMax" >5</text>
				<text y="20" x="0">Layer </text>
				<text y="20" x="45" id="layerNum">100</text>
				<text y="20" x="138" onclick="displayLayer(currentLayer-1)" fill="darkslateblue">&lt;</text>
				<text y="20" x="153" onclick="displayLayer(currentLayer+1)" fill="darkslateblue">&gt;</text>
				<text y="40" x="0">Scale</text>
				<text y="40" x="45" id="scaleNum">0.125</text>
				<text y="40" x="138" onclick="changeScale(zoomScale/2)" fill="darkslateblue">&lt;</text>
				<text y="40" x="153" onclick="changeScale(zoomScale*2)" fill="darkslateblue">&gt;</text>
				<text y="60" id="layerThickness" >Layer Thickness: </text>
			</g>
			<g transform="translate(320, 0)">
				<text y="40">X</text>
				<text y="60">Y</text>
				<text y="80">Z</text>
				<text x="20" y="20">Min</text>
				<text id="minX" x="20" y="40">0.0</text>
				<text id="minY" x="20" y="60">0.0</text>
				<text id="minZ" x="20" y="80">0.0</text>
				<text x="120" y="20">Max</text>
				<text id="maxX" x="120" y="40">0.0</text>
				<text id="maxY" x="120" y="60">0.0</text>
				<text id="maxZ" x="120" y="80">0.0</text>
				<text x="220" y="20">Dimension</text>
				<text id="dimX" x="220" y="40">0.0</text>
				<text id="dimY" x="220" y="60">0.0</text>
				<text id="dimZ" x="220" y="80">0.0</text>
			</g>
		</g>
	</g>
	<!--id="noJavascriptControls" must be there so that the controls could be removed if necessary-->
	<g id="noJavascriptControls" fill="#000" transform="translate(20, 1400)">
		<rect width="640" height="110" stroke="gray" stroke-width="4px" fill="silver"/>
		<g transform="translate(10, 0)">
			<g transform="translate(0, 20)">
				<text x="120">Min</text>
				<text x="220">Max</text>
				<text x="320">Dimension</text>
				<path stroke="#000" stroke-width="3" d="M 5 40 h5 l-5 -10 l-5 10 h5 v35 h35 v-5 l10 5 l-10 5 v-5 h-35 z"/>
				<text x="3" y="20" font-weight="bold">Y</text>
				<text x="60" y="80" font-weight="bold">X</text>
				<text x="120" y="80" id="layerThicknessNoJavascript">Layer Thickness: replaceWith_layerThickness mm</text>
			</g>
			<g transform="translate(100, 40)">
				<text>X</text>
				<text id="minXNoJavascript" x="20">replaceWith_minX</text>
				<text id="maxXNoJavascript" x="120">replaceWith_maxX</text>
				<text id="dimXNoJavascript" x="220">replaceWith_dimX</text>
			</g>
			<g transform="translate(100, 60)">
				<text>Y</text>
				<text id="minYNoJavascript" x="20">replaceWith_minY</text>
				<text id="maxYNoJavascript" x="120">replaceWith_maxY</text>
				<text id="dimYNoJavascript" x="220">replaceWith_dimY</text>
			</g>
			<g transform="translate(100, 80)">
				<text>Z</text>
				<text id="minZNoJavascript" x="20">replaceWith_minZ</text>
				<text id="maxZNoJavascript" x="120">replaceWith_maxZ</text>
				<text id="dimZNoJavascript" x="220">replaceWith_dimZ</text>
			</g>
		</g>
	</g>
</svg>
