<?xml version='1.0' standalone='no'?>
<!--Written in KDevelop (http://www.kdevelop.org/)-->
<svg baseProfile='full' contentScriptType='text/ecmascript' contentStyleType='text/css' height='780.0px' onload='init()' preserveAspectRatio='xMidYMid meet' version='1.0' width='516.0px' xmlns='http://www.w3.org/2000/svg' xmlns:inkscape='http://www.inkscape.org/namespaces/inkscape' xmlns:slice='http://www.reprap.org/slice' xmlns:xlink='http://www.w3.org/1999/xlink' zoomAndPan='magnify'>
	<metadata>
		<slice:layers id='sliceData' controlBoxHeight='720' controlBoxWidth='240' decimalPlacesCarried='4' layerThickness='0.4' margin='20' marginTop='60' maxX='-0.3223' maxY='9.082' maxZ='0.8' minX='-9.5508' minY='0.0' minZ='0.0' perimeterWidth='0.72' procedureName='carve' svgMinWidth='516' template='svg_layer' textHeight='22.5' unitScale='3.7' version='0.1' yAxisPointingUpward='true' />
	</metadata>
	<script type='text/ecmascript' ><![CDATA[
globalMetadata = document.getElementsByTagNameNS('http://www.reprap.org/slice', 'layers')[0];
globalSliceMinX = globalMetadata.getAttribute('minX') * 1;
globalSliceMaxX = globalMetadata.getAttribute('maxX') * 1;
globalSliceMinY = globalMetadata.getAttribute('minY') * 1;
globalSliceMaxY = globalMetadata.getAttribute('maxY') * 1;
globalSliceMinZ = globalMetadata.getAttribute('minZ') * 1;
globalSliceMaxZ = globalMetadata.getAttribute('maxZ') * 1;
//Control var's
globalLayerIndex = 0; //Number of currently viewed layer (zero index)
globalLatitude = 60.0;
globalLongitude = 45.0;
globalControlBoxHeight = globalMetadata.getAttribute('controlBoxHeight') * 1;
globalControlBoxWidth = globalMetadata.getAttribute('controlBoxWidth') * 1;
globalSliding = false;
globalObserving = false
//Display var's
globalMargin = globalMetadata.getAttribute('margin') * 1;
globalMarginTop = globalMetadata.getAttribute('marginTop') * 1;
globalDimensionX = globalSliceMaxX - globalSliceMinX;
globalDimensionY = globalSliceMaxY - globalSliceMinY;
globalDimensionZ = globalSliceMaxZ - globalSliceMinZ;
magnitudeXYSquared = globalDimensionX * globalDimensionX + globalDimensionY * globalDimensionY;
globalDimensionMagnitude = Math.sqrt(magnitudeXYSquared + globalDimensionZ * globalDimensionZ);
globalGlobeTravelRadian = 0.0;
globalGlobeInnerObserverRadius = 0.0;
globalTextHeight = globalMetadata.getAttribute('textHeight') * 1.0;
globalUnitScale = globalMetadata.getAttribute('unitScale') * 1.0;
globalXOffset = globalControlBoxWidth + globalMargin + globalMargin;
globalYOffset = globalMargin + globalMarginTop;
globalZoomScale = 1.0; //Default 1:1 may need smaller scale for large objects
globalScale = globalUnitScale * globalZoomScale;
//Globals to be set in init
globalLayers = [];
globalSlider = 0;
globalThumb = 0;
globalThumbRadius = 0.0;
globalSliderWidthMinusDiameter = 0.0;

function changeScale(newScale) {
	globalZoomScale = newScale;
	globalScale = globalUnitScale * globalZoomScale;
	if (globalZoomScale >=1) { //dont scale line thickness for large display scale
		document.getElementById('layerData').setAttributeNS(null, 'stroke-width', 2.0 / (globalScale));
	}
}
function changeScaleIso(newScale) {
	changeScale(newScale);
	viewIso();
}
function changeScaleLayer(newScale) {
	changeScale(newScale);
	viewLayer();
}
function changeScaleScroll(newScale) {
	changeScale(newScale);
	viewScroll();
}
function displayIso(latitude, longitude) {
	latitude = Math.max(0.0, latitude);
	latitude = Math.min(89.0, latitude);
	globalLatitude = Math.round(latitude);
	globalLongitude = Math.round((longitude + 540.0) % 360.0) - 180.0;
	latitudeRadians = getRadians(globalLatitude);
	longitudeWiddershinsRadians = getRadians(90.0 - globalLongitude);
	unitX = Math.cos(longitudeWiddershinsRadians);
	unitY = Math.sin(longitudeWiddershinsRadians);
	latitudeOverLayers = globalDimensionZ / globalLayers.length;
	globalOneOverUnitScaleString = (1.0 / globalUnitScale).toString();
	yScale = -1.0 * globalScale * Math.cos(latitudeRadians);
	scaleRotateCenterString = ' scale(' + globalScale + ', ' + yScale + ')';
	scaleRotateCenterString += ' rotate(' + (-1.0 * globalLongitude).toString() + ')';
	centerX = (-0.5 * globalDimensionX - globalSliceMinX).toString();
	centerY = (-0.5 * globalDimensionY - globalSliceMinY).toString();
	scaleRotateCenterString += ' translate(' + centerX + ', ' + centerY + ')';
	x = 0.5 * globalDimensionMagnitude * globalScale + globalXOffset;
	for (var i in globalLayers) {
		y = globalScale * (0.5 * globalDimensionMagnitude - Math.sin(latitudeRadians) * i * latitudeOverLayers) + globalYOffset;
//		y = globalDimensionY * globalScale + globalYOffset - i * unitY * latitudeOverLayers;
		transformString = ' translate(' + x + ', ' + y + ')';
		globalLayers[i].setAttributeNS(null, 'transform', transformString + scaleRotateCenterString);
	}
	setText('latitudeIso', 'Latitude: ' + globalLatitude.toString() + '°');
	setText('longitudeIso', 'Longitude: ' + globalLongitude.toString() + '°');
	globeMoveableRadius = globalGlobeTravelRadian * latitudeRadians + globalGlobeInnerObserverRadius;
	globalObserver.setAttribute('cx', globalGlobeCenterX + unitX * globeMoveableRadius);
	globalObserver.setAttribute('cy', globalGlobeCenterY - unitY * globeMoveableRadius);
}
function displayIsoByLatitude(latitude) {
	displayIso(latitude, globalLongitude);
}
function displayIsoByLongitude(longitude) {
	displayIso(globalLatitude, longitude);
}
function displayLayer(layerNum) {
	if (layerNum < 0 || layerNum >= globalLayers.length) {
		return
	}
	globalLayers[globalLayerIndex].setAttributeNS(null, 'visibility', 'hidden');
	currentLayerElement = globalLayers[layerNum]
	currentLayerElement.setAttributeNS(null, 'visibility', 'visible');
	globalLayerIndex = layerNum;
	setText('currentIndexLayer', 'Layer: ' + globalLayerIndex.toString() + ', ' + currentLayerElement.getAttribute('id'));
	//Slider
	if (!globalSliding) {
		placeThumb(globalSliderWidthMinusDiameter / (globalLayers.length - 1) * globalLayerIndex + globalThumbRadius);
	}
}
function getDegrees(radians) {
	return radians / Math.PI * 180.0;
}
function getRadians(degrees) {
	return degrees / 180.0 * Math.PI;
}
function getScaleTransformString(scale) {
	scaleTransformString = 'scale(' + scale + ' ' + (scale * - 1)
	return scaleTransformString + ') translate(' + (globalSliceMinX * - 1) + ' ' + (globalSliceMinY * - 1) + ')';
}
function getWidth() {
	return (globalDimensionX * globalScale) + globalXOffset
}
function hideElements(elementNames) {
	for (var elementNameIndex in elementNames) {
		document.getElementById(elementNames[elementNameIndex]).setAttributeNS(null, 'visibility', 'hidden');
	}
}
function init() {
	//Find only layer groups
	globe = document.getElementById('globe');
	globalGlobeCenterX = globe.getAttribute('cx') * 1;
	globalGlobeCenterXWindow = globalGlobeCenterX + globalMargin;
	globalGlobeCenterY = globe.getAttribute('cy') * 1;
	globalGlobeCenterYWindow = globalGlobeCenterX + globalMarginTop;
	globalObserver = document.getElementById('observer');
	globeRadius = globe.getAttribute('r') * 1.0;
	observerRadius = globalObserver.getAttribute('r') * 1.0;
	globalGlobeInnerObserverRadius = document.getElementById('cover').getAttribute('r') * 1.0 + observerRadius;
	globalGlobeTravelRadian = getDegrees(globeRadius - globalGlobeInnerObserverRadius - observerRadius) / 89.0;
	globalSlider = document.getElementById('slider');
	globalSliderX = globalSlider.getAttribute('x') * 1;
	globalSliderXWindow = globalSliderX + globalMargin
	globalThumb = document.getElementById('thumb');
	globalThumbRadius = globalThumb.getAttribute('r') * 1;
	globalSliderWidthMinusRadius = globalSlider.getAttribute('width') * 1 - globalThumbRadius;
	globalSliderWidthMinusDiameter = globalSliderWidthMinusRadius - globalThumbRadius;
	var allGroups = document.getElementsByTagName('g');
	for (var i = 0; i < allGroups.length; i++) {
		if (allGroups[i].id.indexOf('z:') == 0) {
			globalLayers.push(allGroups[i]);
		}
	}
	//Slider
	layerControlBox = document.getElementById('layerControlBox');
	layerControlBox.addEventListener('mouseup', sliderUp, false);
	layerControlBox.addEventListener('mousemove', sliderMove, false);
	globalSlider.addEventListener('mousedown', sliderDownMove, false);
	globalThumb.addEventListener('mousedown', sliderDownMove, false);
	//Observer
	isoControlBox = document.getElementById('isoControlBox');
	isoControlBox.addEventListener('mouseup', observerUp, false);
	isoControlBox.addEventListener('mousemove', observerMove, false);
	globe.addEventListener('mousedown', observerDownMove, false);
	globalObserver.addEventListener('mousedown', observerDownMove, false);
	
	//Control box data
	setText('maxIndexLayer', globalLayers.length - 1);
	changeScaleLayer(globalZoomScale);
}
function observerDown(event) {
	globalObserving = true;
}
function observerDownMove(event) {
	globalObserving = true;
	observerMove(event);
}
function observerMove(event) {
	if (!globalObserving) {
		return;
	}
	observerX = event.clientX - globalGlobeCenterXWindow + window.pageXOffset;
	observerY = event.clientY - globalGlobeCenterYWindow + window.pageYOffset;
	distanceFromCenter = Math.sqrt(observerX * observerX + observerY * observerY);
	latitudeRadians = (distanceFromCenter - globalGlobeInnerObserverRadius) / globalGlobeTravelRadian;
	longitudeRadians = Math.atan2(observerX, -observerY);
	displayIso(getDegrees(latitudeRadians), getDegrees(longitudeRadians));
}
function observerUp(event) {
	globalObserving = false;
}
function placeThumb(value) {
	globalThumb.setAttribute('cx', globalSliderX + value);
}
function setScaleText(scaleID) {
	setText(scaleID, ': ' + globalZoomScale);
}
function setSVG(width, height) {
	rootSVG = document.getElementsByTagName('svg')[0];
	svgMinWidth = globalMetadata.getAttribute('svgMinWidth') * 1;
	height = Math.max(globalControlBoxHeight + globalMargin + globalMarginTop, height);
	width = Math.max(svgMinWidth, width);
	rootSVG.setAttributeNS(null, 'width', width + 'px')
	rootSVG.setAttributeNS(null, 'height', height + 'px')
}
function setText(id, str) {
	e = document.getElementById(id)
	if (e != null)
		e.firstChild.nodeValue = str;
}
function showElements(elementNames) {
	for (var elementNameIndex in elementNames) {
		document.getElementById(elementNames[elementNameIndex]).setAttributeNS(null, 'visibility', 'visible');
	}
}
function sliderDown(event) {
	globalSliding = true;
}
function sliderDownMove(event) {
	globalSliding = true;
	sliderMove(event);
}
function sliderMove(event) {
	if (!globalSliding) {
		return;
	}
	value = event.clientX - globalSliderXWindow + window.pageXOffset;
	if (value >= globalThumbRadius && value <= globalSliderWidthMinusRadius) {
		placeThumb(value);
		zoneWidth = globalSliderWidthMinusDiameter / (globalLayers.length);
		newLayer = Math.round((value - globalThumbRadius - 0.5 * zoneWidth) / zoneWidth)
		if (newLayer != globalLayerIndex) {
			displayLayer(newLayer)
		}
	}
}
function sliderUp(event) {
	globalSliding = false;
}
function viewIso() {
	height = (globalDimensionMagnitude * globalScale) + globalYOffset;
	setSVG((globalDimensionMagnitude * globalScale) + globalXOffset, height);
	for (var i in globalLayers) {
//		globalLayers[i].setAttributeNS(null, 'transform', 'translate(' + globalMargin + ' ' + height + ')');
		globalLayers[i].setAttributeNS(null, 'visibility', 'visible');
		globalLayers[i].getElementsByTagName('text')[0].setAttributeNS(null, 'visibility', 'hidden');
		pathElements = globalLayers[i].getElementsByTagName('path');
		for (var pathElementIndex = 0; pathElementIndex < pathElements.length; pathElementIndex++) {
			  pathElements[pathElementIndex].setAttributeNS(null, 'transform', '');
		  }
	  }
	  //show control box
	hideElements(['isoViewButton', 'layerControlBox', 'layerViewLabel', 'scrollControlBox', 'scrollViewLabel']);
	showElements(['isoControlBox', 'isoViewLabel', 'layerViewButton', 'scrollViewButton']);
	displayIso(globalLatitude, globalLongitude);
	setScaleText('scaleIso');
}
function viewLayer() {
	//Set svg size and view port
	height = (globalDimensionY * globalScale) + globalYOffset;
	setSVG(getWidth(), height);
	//move and hide all layers 
	for (var i in globalLayers) {
		globalLayers[i].setAttributeNS(null, 'transform', 'translate(' + globalXOffset + ' ' + height + ')');
		globalLayers[i].setAttributeNS(null, 'visibility', 'hidden');
		globalLayers[i].getElementsByTagName('text')[0].setAttributeNS(null, 'visibility', 'hidden');
		transform = getScaleTransformString(globalScale);
		pathElements = globalLayers[i].getElementsByTagName('path');
		for (var pathElementIndex = 0; pathElementIndex < pathElements.length; pathElementIndex++) {
			pathElements[pathElementIndex].setAttributeNS(null, 'transform', transform);
		}
	}
	//show control box
	hideElements(['isoControlBox', 'isoViewLabel', 'layerViewButton', 'scrollControlBox', 'scrollViewLabel'])
	showElements(['isoViewButton', 'layerControlBox', 'layerViewLabel', 'scrollViewButton'])
	
	//show current layer
	displayLayer(globalLayerIndex);
	setScaleText('scaleLayer');
}
function viewScroll() {
	//Set svg size and view port
	yDimensionScale = globalDimensionY * globalScale
	singleHeight = (globalMargin + yDimensionScale + globalTextHeight)
	height = globalLayers.length * singleHeight + globalMargin + globalMargin + globalYOffset;
	setSVG(getWidth(), height);
	//move and show all layers 
	for (var i in globalLayers) {
		x = globalXOffset;
		y = i * singleHeight + yDimensionScale + globalYOffset;
		transform = getScaleTransformString(globalScale);
		globalLayers[i].setAttributeNS(null, 'transform', 'translate(' + x + ', ' + y + ')');
		pathElements = globalLayers[i].getElementsByTagName('path');
		for (var pathElementIndex = 0; pathElementIndex < pathElements.length; pathElementIndex++) {
			pathElements[pathElementIndex].setAttributeNS(null, 'transform', transform);
		}
		globalLayers[i].setAttributeNS(null, 'visibility', 'visible');
		globalLayers[i].getElementsByTagName('text')[0].setAttributeNS(null, 'visibility', 'visible');
	}
	//show control box
	hideElements(['isoControlBox', 'isoViewLabel', 'layerControlBox', 'layerViewLabel', 'scrollViewButton'])
	showElements(['isoViewButton', 'layerViewButton', 'scrollControlBox', 'scrollViewLabel'])
	setScaleText('scaleScroll');
}
	]]></script>
	<title >flip_element.xml - Slice Layers</title>
	<!--Begin Layer Data   -->
	<g id='layerData' fill='#556B2F' font-family='Arial' font-size='15px' font-weight='bold' inkscape:groupmode='layer' inkscape:label='Slice Layers' stroke='#00F' stroke-width='0.54px'>
		<!--id='sliceElementTemplate' must be there or else the slice template will not be found-->
		<g id='z:0.2' inkscape:groupmode='layer' inkscape:label='Layer 0, z:0.2' transform='translate(280.0, 113.6035)'>
			<!--id='layerTextTemplate' must be there so that the text could be removed if necessary-->
			<text id='layerTextTemplate0.2' fill='#000' stroke='none' y='15' >Layer 0, z:0.2</text>
			<path d='M -3.9258 0.0 L -3.9258 0.252 L -4.5781 0.4587 L -4.746 0.6079 L -4.727 4.1337 L -4.6569 4.4688 L -4.6003 4.588 L -4.4475 4.7553 L -4.1972 4.8489 L -3.9623 4.8625 L -3.6823 4.8075 L -3.274 4.6013 L -2.8486 4.2672 L -2.4199 3.7933 L -2.0215 3.2168 L -2.0215 0.6094 L -2.1799 0.4549 L -2.8418 0.252 L -2.8418 0.0 L -0.3223 0.0 L -0.3223 0.252 L -0.9597 0.4404 L -1.1425 0.6075 L -1.1236 7.996 L -0.8914 8.2787 L -0.3273 8.3781 L -0.3223 8.6133 L -1.2184 8.8305 L -1.8016 9.0805 L -2.0215 8.8828 L -2.0215 4.9828 L -2.6281 4.7299 L -3.1074 5.1282 L -3.5357 5.3919 L -3.9508 5.5646 L -4.2815 5.6238 L -4.5065 5.6154 L -4.9945 5.4747 L -5.2702 5.2728 L -5.5013 4.942 L -5.6161 4.5226 L -5.625 0.6094 L -5.7977 0.4526 L -6.4453 0.252 L -7.0312 0.252 L -7.6908 0.4515 L -7.8515 0.6078 L -7.8234 4.5254 L -7.7843 4.6392 L -7.656 4.7828 L -7.4674 4.8573 L -7.0369 4.9213 L -7.0312 5.1563 L -7.7383 5.3256 L -8.5284 5.6237 L -8.7305 5.625 L -8.7305 0.6094 L -8.8571 0.4764 L -9.5508 0.252 L -9.5508 0.0 z M -8.2313 7.9184 L -8.4525 7.9442 L -8.6428 7.9039 L -8.7529 7.8347 L -8.8404 7.7199 L -8.8898 7.5727 L -8.8996 7.2746 L -8.8446 7.0544 L -8.7735 6.9105 L -8.6264 6.7392 L -8.4512 6.6284 L -8.2546 6.5856 L -8.0982 6.5962 L -7.9714 6.6356 L -7.8642 6.7169 L -7.8002 6.8183 L -7.7534 6.9646 L -7.741 7.2626 L -7.8066 7.5084 L -7.9319 7.709 L -8.0803 7.8413 z' transform='scale(3.7, -3.7) translate(9.5508, 0.0)' />
		</g>
		<g id='z:0.6' inkscape:groupmode='layer' inkscape:label='Layer 1, z:0.6' transform='translate(280.0, 189.707)'>
			<!--id='layerTextTemplate' must be there so that the text could be removed if necessary-->
			<text id='layerTextTemplate0.6' fill='#000' stroke='none' y='15' >Layer 1, z:0.6</text>
			<path d='M -3.9258 0.0 L -3.9258 0.252 L -4.5879 0.4632 L -4.7458 0.6049 L -4.7358 4.0327 L -4.6834 4.3854 L -4.6189 4.5548 L -4.4729 4.7358 L -4.26 4.8366 L -3.9774 4.8631 L -3.5779 4.7672 L -3.0346 4.4284 L -2.6546 4.0708 L -2.0215 3.2168 L -2.0303 0.574 L -2.1421 0.4751 L -2.8418 0.252 L -2.8418 0.0 L -0.3223 0.0 L -0.3223 0.252 L -0.9524 0.4376 L -1.1426 0.6094 L -1.1243 7.9912 L -0.8842 8.2813 L -0.3223 8.3789 L -0.3223 8.6133 L -1.1807 8.8184 L -1.8047 9.082 L -2.0215 8.8828 L -2.0215 4.6558 L -2.5505 4.6543 L -3.3528 5.2889 L -3.787 5.5075 L -4.3169 5.6249 L -4.6305 5.5967 L -4.8874 5.5233 L -5.2169 5.323 L -5.4711 5.0007 L -5.5661 4.778 L -5.6213 4.4601 L -5.6293 0.5842 L -5.7618 0.4693 L -6.4453 0.252 L -7.0312 0.252 L -7.7007 0.4566 L -7.8516 0.6094 L -7.8287 4.4997 L -7.7865 4.6347 L -7.6603 4.78 L -7.5117 4.8457 L -7.0312 4.9219 L -7.0312 5.1563 L -8.0211 5.418 L -8.5312 5.625 L -8.7305 5.625 L -8.7352 0.5869 L -8.838 0.4883 L -8.981 0.4125 L -9.5508 0.252 L -9.5508 0.0 z M -8.3688 7.9441 L -8.5728 7.9269 L -8.7046 7.8717 L -8.8033 7.7797 L -8.8692 7.6509 L -8.903 7.3092 L -8.802 6.9605 L -8.6108 6.7263 L -8.4321 6.6205 L -8.252 6.5855 L -7.9943 6.6253 L -7.8848 6.6952 L -7.8064 6.8054 L -7.7379 7.0772 L -7.7713 7.4106 L -7.9285 7.7051 L -8.1596 7.8888 z' transform='scale(3.7, -3.7) translate(9.5508, 0.0)' />
		</g>
	</g>
	<!--End Layer Data-->
	<!--beginningOfControlSection='true' must be there or else the control boxes will be carved-->
	<g id='controls' beginningOfControlSection='true' inkscape:groupmode='layer' inkscape:label='Controls'>
	<!--id='isoControlBox' must be there so that the controls could be removed if necessary-->
		<g id='isoControlBox' fill='#000' font-family='Arial' font-size='15px' font-weight='bold' transform='translate(20, 60)' visibility='hidden'>
			<rect fill='silver' height='720' stroke='gray' stroke-width='4px' width='240' />
			<circle id='globe' cx='120' cy='120' fill='gray' r='100' />
			<circle id='cover' cx='120' cy='120' fill='silver' r='33' />
			<circle id='observer' fill='darkslateblue' r='12' />
			<text id='latitudeIso' x='20' y='260' >Latitude</text>
			<text fill='darkslateblue' onclick='displayIsoByLatitude(globalLatitude-1.0)' x='198' y='260' >&lt;</text>
			<text fill='darkslateblue' onclick='displayIsoByLatitude(globalLatitude+1.0)' x='213' y='260' >&gt;</text>
			<text id='longitudeIso' x='20' y='280' >Longitude</text>
			<text fill='darkslateblue' onclick='displayIsoByLongitude(globalLongitude-1.0)' x='198' y='280' >&lt;</text>
			<text fill='darkslateblue' onclick='displayIsoByLongitude(globalLongitude+1.0)' x='213' y='280' >&gt;</text>
			<text x='20' y='300' >Scale</text>
			<text id='scaleIso' x='65' y='300' >1</text>
			<text fill='darkslateblue' onclick='changeScaleIso(globalZoomScale/2)' x='198' y='300' >&lt;</text>
			<text fill='darkslateblue' onclick='changeScaleIso(globalZoomScale*2)' x='213' y='300' >&gt;</text>
			<g transform='translate(20, 340)'>
				<text >Min</text>
				<text id='minXIso' y='20' >X: -9.5508 mm</text>
				<text id='minYIso' y='40' >Y: 0.0 mm</text>
				<text id='minZIso' y='60' >Z: 0.0 mm</text>
			</g>
			<g transform='translate(20, 440)'>
				<text >Max</text>
				<text id='maxXIso' y='20' >X: -0.3223 mm</text>
				<text id='maxYIso' y='40' >Y: 9.082 mm</text>
				<text id='maxZIso' y='60' >Z: 0.8 mm</text>
			</g>
			<g transform='translate(20, 540)'>
				<text >Dimension</text>
				<text id='dimXIso' y='20' >X: 9.2285 mm</text>
				<text id='dimYIso' y='40' >Y: 9.082 mm</text>
				<text id='dimZIso' y='60' >Z: 0.8 mm</text>
			</g>
			<g transform='translate(20, 640)'>
				<text >Statistics</text>
				<text id='layerThicknessIso' y='20' >Layer Thickness: 0.4 mm</text>
				<text id='numberOfLayersIso' y='40' >Number of Layers: 2</text>
				<text id='volumeIso' y='60' >Volume: 0.0475 cm3</text>
			</g>
		</g>
		<!--id='layerControlBox' must be there so that the controls could be removed if necessary-->
		<g id='layerControlBox' fill='#000' font-family='Arial' font-size='15px' font-weight='bold' transform='translate(20, 60)' visibility='hidden'>
			<rect fill='silver' height='720' stroke='gray' stroke-width='4px' width='240' />
			<path d='M 66 164 h76 v6 l18 -9 l-18 -9 v6 h-70 v-70 h6 l-9 -18 l-9 18 h6 z' stroke-width='0' />
			<!--<path stroke='#000' stroke-width='3' d='M 20 20 h5 l-5 -10 l-5 10 h5 v35 h35 v-5 l10 5 l-10 5 v-5 h-35 z'/>-->
			<text text-anchor='middle' x='68' y='64' >Y</text>
			<text x='165' y='166' >X</text>
			<text x='20' y='245' >0</text>
			<rect id='slider' fill='gray' height='24' width='170' x='32' y='230' />
			<circle id='thumb' cx='42' cy='242' fill='darkslateblue' r='12' />
			<text id='maxIndexLayer' x='203' y='245' >1</text>
			<text id='currentIndexLayer' x='20' y='280' >Layer</text>
			<text fill='darkslateblue' onclick='displayLayer(globalLayerIndex-1)' x='198' y='280' >&lt;</text>
			<text fill='darkslateblue' onclick='displayLayer(globalLayerIndex+1)' x='213' y='280' >&gt;</text>
			<text x='20' y='300' >Scale</text>
			<text id='scaleLayer' x='65' y='300' >1</text>
			<text fill='darkslateblue' onclick='changeScaleLayer(globalZoomScale/2)' x='198' y='300' >&lt;</text>
			<text fill='darkslateblue' onclick='changeScaleLayer(globalZoomScale*2)' x='213' y='300' >&gt;</text>
			<g transform='translate(20, 340)'>
				<text >Min</text>
				<text id='minXLayer' y='20' >X: -9.5508 mm</text>
				<text id='minYLayer' y='40' >Y: 0.0 mm</text>
				<text id='minZLayer' y='60' >Z: 0.0 mm</text>
			</g>
			<g transform='translate(20, 440)'>
				<text >Max</text>
				<text id='maxXLayer' y='20' >X: -0.3223 mm</text>
				<text id='maxYLayer' y='40' >Y: 9.082 mm</text>
				<text id='maxZLayer' y='60' >Z: 0.8 mm</text>
			</g>
			<g transform='translate(20, 540)'>
				<text >Dimension</text>
				<text id='dimXLayer' y='20' >X: 9.2285 mm</text>
				<text id='dimYLayer' y='40' >Y: 9.082 mm</text>
				<text id='dimZLayer' y='60' >Z: 0.8 mm</text>
			</g>
			<g transform='translate(20, 640)'>
				<text >Statistics</text>
				<text id='layerThicknessLayer' y='20' >Layer Thickness: 0.4 mm</text>
				<text id='numberOfLayersLayer' y='40' >Number of Layers: 2</text>
				<text id='volumeLayer' y='60' >Volume: 0.0475 cm3</text>
			</g>
		</g>
		<!--id='scrollControlBox' must be there so that the controls could be removed if necessary-->
		<g id='scrollControlBox' fill='#000' font-family='Arial' font-size='15px' font-weight='bold' transform='translate(20, 60)' visibility='visible'>
			<rect fill='silver' height='720' stroke='gray' stroke-width='4px' width='240' />
			<path d='M 66 164 h76 v6 l18 -9 l-18 -9 v6 h-70 v-70 h6 l-9 -18 l-9 18 h6 z' stroke-width='0' />
			<text text-anchor='middle' x='68' y='64' >Y</text>
			<text x='165' y='166' >X</text>
			<text x='20' y='300' >Scale</text>
			<text id='scaleScroll' x='65' y='300' >: 1</text>
			<text fill='darkslateblue' onclick='changeScaleScroll(globalZoomScale/2)' x='198' y='300' >&lt;</text>
			<text fill='darkslateblue' onclick='changeScaleScroll(globalZoomScale*2)' x='213' y='300' >&gt;</text>
			<g transform='translate(20, 340)'>
				<text >Min</text>
				<text id='minXScroll' y='20' >X: -9.5508 mm</text>
				<text id='minYScroll' y='40' >Y: 0.0 mm</text>
				<text id='minZScroll' y='60' >Z: 0.0 mm</text>
			</g>
			<g transform='translate(20, 440)'>
				<text >Max</text>
				<text id='maxXScroll' y='20' >X: -0.3223 mm</text>
				<text id='maxYScroll' y='40' >Y: 9.082 mm</text>
				<text id='maxZScroll' y='60' >Z: 0.8 mm</text>
			</g>
			<g transform='translate(20, 540)'>
				<text >Dimension</text>
				<text id='dimXScroll' y='20' >X: 9.2285 mm</text>
				<text id='dimYScroll' y='40' >Y: 9.082 mm</text>
				<text id='dimZScroll' y='60' >Z: 0.8 mm</text>
			</g>
			<g transform='translate(20, 640)'>
				<text >Statistics</text>
				<text id='layerThicknessScroll' y='20' >Layer Thickness: 0.4 mm</text>
				<text id='numberOfLayersScroll' y='40' >Number of Layers: 2</text>
				<text id='volumeScroll' y='60' >Volume: 0.0475 cm3</text>
			</g>
		</g>
		<text id='isoViewButton' fill='darkslateblue' font-size='18px' font-weight='normal' onclick='viewIso()' text-anchor='middle' visibility='visible' x='80' y='30' >[Iso View]</text>
		<text id='isoViewLabel' fill='darkslateblue' font-size='24px' font-weight='bold' text-anchor='middle' visibility='hidden' x='76' y='30' >Iso View</text>
		<text id='layerViewButton' fill='darkslateblue' font-size='18px' font-weight='normal' onclick='viewLayer()' text-anchor='middle' visibility='visible' x='240' y='30' >[Layer View]</text>
		<text id='layerViewLabel' fill='darkslateblue' font-size='24px' font-weight='bold' text-anchor='middle' visibility='hidden' x='236' y='30' >Layer View</text>
		<text id='scrollViewButton' fill='darkslateblue' font-size='18px' font-weight='normal' onclick='viewScroll()' text-anchor='middle' visibility='hidden' x='400' y='30' >[Scroll View]</text>
		<text id='scrollViewLabel' fill='darkslateblue' font-size='24px' font-weight='bold' text-anchor='middle' visibility='visible' x='396' y='30' >Scroll View</text>
	</g>
<!-- Original XML Text:
<fabmetheus>
	<text id='hi' >hi</text>
	<extrude id='extrudeHi' target='=document.getElementByID(hi)' />
	<flip target='=document.getElementByID(extrudeHi)' />
</fabmetheus>
-->
</svg>
